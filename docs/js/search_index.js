var search_data = {"index":{"searchIndex":["rubyfann","shortcut","standard","traindata","version","cascadetrain_on_data()","cascadetrain_on_data()","get_mse()","get_mse()","get_activation_function()","get_activation_function()","get_activation_steepness()","get_activation_steepness()","get_bias_array()","get_bias_array()","get_bit_fail()","get_bit_fail()","get_bit_fail_limit()","get_bit_fail_limit()","get_cascade_activation_functions()","get_cascade_activation_functions()","get_cascade_activation_functions_count()","get_cascade_activation_functions_count()","get_cascade_activation_steepnesses()","get_cascade_activation_steepnesses()","get_cascade_activation_steepnesses_count()","get_cascade_activation_steepnesses_count()","get_cascade_candidate_change_fraction()","get_cascade_candidate_change_fraction()","get_cascade_candidate_limit()","get_cascade_candidate_limit()","get_cascade_candidate_stagnation_epochs()","get_cascade_candidate_stagnation_epochs()","get_cascade_max_cand_epochs()","get_cascade_max_cand_epochs()","get_cascade_max_out_epochs()","get_cascade_max_out_epochs()","get_cascade_num_candidate_groups()","get_cascade_num_candidate_groups()","get_cascade_num_candidates()","get_cascade_num_candidates()","get_cascade_output_change_fraction()","get_cascade_output_change_fraction()","get_cascade_output_stagnation_epochs()","get_cascade_output_stagnation_epochs()","get_cascade_weight_multiplier()","get_cascade_weight_multiplier()","get_connection_rate()","get_connection_rate()","get_layer_array()","get_layer_array()","get_learning_momentum()","get_learning_momentum()","get_learning_rate()","get_learning_rate()","get_network_type()","get_network_type()","get_neurons()","get_neurons()","get_num_input()","get_num_input()","get_num_layers()","get_num_layers()","get_num_output()","get_num_output()","get_quickprop_decay()","get_quickprop_decay()","get_quickprop_mu()","get_quickprop_mu()","get_rprop_decrease_factor()","get_rprop_decrease_factor()","get_rprop_delta_max()","get_rprop_delta_max()","get_rprop_delta_min()","get_rprop_delta_min()","get_rprop_delta_zero()","get_rprop_delta_zero()","get_rprop_increase_factor()","get_rprop_increase_factor()","get_total_connections()","get_total_connections()","get_total_neurons()","get_total_neurons()","get_train_error_function()","get_train_error_function()","get_train_stop_function()","get_train_stop_function()","get_training_algorithm()","get_training_algorithm()","init_weights()","init_weights()","length()","new()","new()","new()","print_connections()","print_connections()","print_parameters()","print_parameters()","randomize_weights()","randomize_weights()","reset_mse()","reset_mse()","run()","run()","save()","save()","save()","set_activation_function()","set_activation_function()","set_activation_function_hidden()","set_activation_function_hidden()","set_activation_function_layer()","set_activation_function_layer()","set_activation_function_output()","set_activation_function_output()","set_activation_steepness()","set_activation_steepness()","set_activation_steepness_hidden()","set_activation_steepness_hidden()","set_activation_steepness_layer()","set_activation_steepness_layer()","set_activation_steepness_output()","set_activation_steepness_output()","set_bit_fail_limit()","set_bit_fail_limit()","set_cascade_activation_functions()","set_cascade_activation_functions()","set_cascade_activation_steepnesses()","set_cascade_activation_steepnesses()","set_cascade_candidate_change_fraction()","set_cascade_candidate_change_fraction()","set_cascade_candidate_limit()","set_cascade_candidate_limit()","set_cascade_candidate_stagnation_epochs()","set_cascade_candidate_stagnation_epochs()","set_cascade_max_cand_epochs()","set_cascade_max_cand_epochs()","set_cascade_max_out_epochs()","set_cascade_max_out_epochs()","set_cascade_num_candidate_groups()","set_cascade_num_candidate_groups()","set_cascade_output_change_fraction()","set_cascade_output_change_fraction()","set_cascade_output_stagnation_epochs()","set_cascade_output_stagnation_epochs()","set_cascade_weight_multiplier()","set_cascade_weight_multiplier()","set_learning_momentum()","set_learning_momentum()","set_learning_rate()","set_learning_rate()","set_quickprop_decay()","set_quickprop_decay()","set_quickprop_mu()","set_quickprop_mu()","set_rprop_decrease_factor()","set_rprop_decrease_factor()","set_rprop_delta_max()","set_rprop_delta_max()","set_rprop_delta_min()","set_rprop_delta_min()","set_rprop_delta_zero()","set_rprop_delta_zero()","set_rprop_increase_factor()","set_rprop_increase_factor()","set_train_error_function()","set_train_error_function()","set_train_stop_function()","set_train_stop_function()","set_training_algorithm()","set_training_algorithm()","shuffle()","test_data()","test_data()","train()","train()","train_epoch()","train_epoch()","train_on_data()","train_on_data()","readme"],"longSearchIndex":["rubyfann","rubyfann::shortcut","rubyfann::standard","rubyfann::traindata","rubyfann::version","rubyfann::shortcut#cascadetrain_on_data()","rubyfann::standard#cascadetrain_on_data()","rubyfann::shortcut#get_mse()","rubyfann::standard#get_mse()","rubyfann::shortcut#get_activation_function()","rubyfann::standard#get_activation_function()","rubyfann::shortcut#get_activation_steepness()","rubyfann::standard#get_activation_steepness()","rubyfann::shortcut#get_bias_array()","rubyfann::standard#get_bias_array()","rubyfann::shortcut#get_bit_fail()","rubyfann::standard#get_bit_fail()","rubyfann::shortcut#get_bit_fail_limit()","rubyfann::standard#get_bit_fail_limit()","rubyfann::shortcut#get_cascade_activation_functions()","rubyfann::standard#get_cascade_activation_functions()","rubyfann::shortcut#get_cascade_activation_functions_count()","rubyfann::standard#get_cascade_activation_functions_count()","rubyfann::shortcut#get_cascade_activation_steepnesses()","rubyfann::standard#get_cascade_activation_steepnesses()","rubyfann::shortcut#get_cascade_activation_steepnesses_count()","rubyfann::standard#get_cascade_activation_steepnesses_count()","rubyfann::shortcut#get_cascade_candidate_change_fraction()","rubyfann::standard#get_cascade_candidate_change_fraction()","rubyfann::shortcut#get_cascade_candidate_limit()","rubyfann::standard#get_cascade_candidate_limit()","rubyfann::shortcut#get_cascade_candidate_stagnation_epochs()","rubyfann::standard#get_cascade_candidate_stagnation_epochs()","rubyfann::shortcut#get_cascade_max_cand_epochs()","rubyfann::standard#get_cascade_max_cand_epochs()","rubyfann::shortcut#get_cascade_max_out_epochs()","rubyfann::standard#get_cascade_max_out_epochs()","rubyfann::shortcut#get_cascade_num_candidate_groups()","rubyfann::standard#get_cascade_num_candidate_groups()","rubyfann::shortcut#get_cascade_num_candidates()","rubyfann::standard#get_cascade_num_candidates()","rubyfann::shortcut#get_cascade_output_change_fraction()","rubyfann::standard#get_cascade_output_change_fraction()","rubyfann::shortcut#get_cascade_output_stagnation_epochs()","rubyfann::standard#get_cascade_output_stagnation_epochs()","rubyfann::shortcut#get_cascade_weight_multiplier()","rubyfann::standard#get_cascade_weight_multiplier()","rubyfann::shortcut#get_connection_rate()","rubyfann::standard#get_connection_rate()","rubyfann::shortcut#get_layer_array()","rubyfann::standard#get_layer_array()","rubyfann::shortcut#get_learning_momentum()","rubyfann::standard#get_learning_momentum()","rubyfann::shortcut#get_learning_rate()","rubyfann::standard#get_learning_rate()","rubyfann::shortcut#get_network_type()","rubyfann::standard#get_network_type()","rubyfann::shortcut#get_neurons()","rubyfann::standard#get_neurons()","rubyfann::shortcut#get_num_input()","rubyfann::standard#get_num_input()","rubyfann::shortcut#get_num_layers()","rubyfann::standard#get_num_layers()","rubyfann::shortcut#get_num_output()","rubyfann::standard#get_num_output()","rubyfann::shortcut#get_quickprop_decay()","rubyfann::standard#get_quickprop_decay()","rubyfann::shortcut#get_quickprop_mu()","rubyfann::standard#get_quickprop_mu()","rubyfann::shortcut#get_rprop_decrease_factor()","rubyfann::standard#get_rprop_decrease_factor()","rubyfann::shortcut#get_rprop_delta_max()","rubyfann::standard#get_rprop_delta_max()","rubyfann::shortcut#get_rprop_delta_min()","rubyfann::standard#get_rprop_delta_min()","rubyfann::shortcut#get_rprop_delta_zero()","rubyfann::standard#get_rprop_delta_zero()","rubyfann::shortcut#get_rprop_increase_factor()","rubyfann::standard#get_rprop_increase_factor()","rubyfann::shortcut#get_total_connections()","rubyfann::standard#get_total_connections()","rubyfann::shortcut#get_total_neurons()","rubyfann::standard#get_total_neurons()","rubyfann::shortcut#get_train_error_function()","rubyfann::standard#get_train_error_function()","rubyfann::shortcut#get_train_stop_function()","rubyfann::standard#get_train_stop_function()","rubyfann::shortcut#get_training_algorithm()","rubyfann::standard#get_training_algorithm()","rubyfann::shortcut#init_weights()","rubyfann::standard#init_weights()","rubyfann::traindata#length()","rubyfann::shortcut::new()","rubyfann::standard::new()","rubyfann::traindata::new()","rubyfann::shortcut#print_connections()","rubyfann::standard#print_connections()","rubyfann::shortcut#print_parameters()","rubyfann::standard#print_parameters()","rubyfann::shortcut#randomize_weights()","rubyfann::standard#randomize_weights()","rubyfann::shortcut#reset_mse()","rubyfann::standard#reset_mse()","rubyfann::shortcut#run()","rubyfann::standard#run()","rubyfann::shortcut#save()","rubyfann::standard#save()","rubyfann::traindata#save()","rubyfann::shortcut#set_activation_function()","rubyfann::standard#set_activation_function()","rubyfann::shortcut#set_activation_function_hidden()","rubyfann::standard#set_activation_function_hidden()","rubyfann::shortcut#set_activation_function_layer()","rubyfann::standard#set_activation_function_layer()","rubyfann::shortcut#set_activation_function_output()","rubyfann::standard#set_activation_function_output()","rubyfann::shortcut#set_activation_steepness()","rubyfann::standard#set_activation_steepness()","rubyfann::shortcut#set_activation_steepness_hidden()","rubyfann::standard#set_activation_steepness_hidden()","rubyfann::shortcut#set_activation_steepness_layer()","rubyfann::standard#set_activation_steepness_layer()","rubyfann::shortcut#set_activation_steepness_output()","rubyfann::standard#set_activation_steepness_output()","rubyfann::shortcut#set_bit_fail_limit()","rubyfann::standard#set_bit_fail_limit()","rubyfann::shortcut#set_cascade_activation_functions()","rubyfann::standard#set_cascade_activation_functions()","rubyfann::shortcut#set_cascade_activation_steepnesses()","rubyfann::standard#set_cascade_activation_steepnesses()","rubyfann::shortcut#set_cascade_candidate_change_fraction()","rubyfann::standard#set_cascade_candidate_change_fraction()","rubyfann::shortcut#set_cascade_candidate_limit()","rubyfann::standard#set_cascade_candidate_limit()","rubyfann::shortcut#set_cascade_candidate_stagnation_epochs()","rubyfann::standard#set_cascade_candidate_stagnation_epochs()","rubyfann::shortcut#set_cascade_max_cand_epochs()","rubyfann::standard#set_cascade_max_cand_epochs()","rubyfann::shortcut#set_cascade_max_out_epochs()","rubyfann::standard#set_cascade_max_out_epochs()","rubyfann::shortcut#set_cascade_num_candidate_groups()","rubyfann::standard#set_cascade_num_candidate_groups()","rubyfann::shortcut#set_cascade_output_change_fraction()","rubyfann::standard#set_cascade_output_change_fraction()","rubyfann::shortcut#set_cascade_output_stagnation_epochs()","rubyfann::standard#set_cascade_output_stagnation_epochs()","rubyfann::shortcut#set_cascade_weight_multiplier()","rubyfann::standard#set_cascade_weight_multiplier()","rubyfann::shortcut#set_learning_momentum()","rubyfann::standard#set_learning_momentum()","rubyfann::shortcut#set_learning_rate()","rubyfann::standard#set_learning_rate()","rubyfann::shortcut#set_quickprop_decay()","rubyfann::standard#set_quickprop_decay()","rubyfann::shortcut#set_quickprop_mu()","rubyfann::standard#set_quickprop_mu()","rubyfann::shortcut#set_rprop_decrease_factor()","rubyfann::standard#set_rprop_decrease_factor()","rubyfann::shortcut#set_rprop_delta_max()","rubyfann::standard#set_rprop_delta_max()","rubyfann::shortcut#set_rprop_delta_min()","rubyfann::standard#set_rprop_delta_min()","rubyfann::shortcut#set_rprop_delta_zero()","rubyfann::standard#set_rprop_delta_zero()","rubyfann::shortcut#set_rprop_increase_factor()","rubyfann::standard#set_rprop_increase_factor()","rubyfann::shortcut#set_train_error_function()","rubyfann::standard#set_train_error_function()","rubyfann::shortcut#set_train_stop_function()","rubyfann::standard#set_train_stop_function()","rubyfann::shortcut#set_training_algorithm()","rubyfann::standard#set_training_algorithm()","rubyfann::traindata#shuffle()","rubyfann::shortcut#test_data()","rubyfann::standard#test_data()","rubyfann::shortcut#train()","rubyfann::standard#train()","rubyfann::shortcut#train_epoch()","rubyfann::standard#train_epoch()","rubyfann::shortcut#train_on_data()","rubyfann::standard#train_on_data()",""],"info":[["RubyFann","","RubyFann.html","","<p>Namespace for ruby-fann functionality.\n<p>See RubyFann::Shortcut, RubyFann::Standard, and RubyFann::TrainData …\n"],["RubyFann::Shortcut","","RubyFann/Shortcut.html","",""],["RubyFann::Standard","","RubyFann/Standard.html","",""],["RubyFann::TrainData","","RubyFann/TrainData.html","",""],["RubyFann::VERSION","","RubyFann/VERSION.html","",""],["cascadetrain_on_data","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-cascadetrain_on_data","(p1, p2, p3, p4)","<p>Perform cascade training with training data created with RubyFann::TrainData.new\n\n<pre>max_epochs - The maximum ...</pre>\n"],["cascadetrain_on_data","RubyFann::Standard","RubyFann/Standard.html#method-i-cascadetrain_on_data","(p1, p2, p3, p4)","<p>Perform cascade training with training data created with RubyFann::TrainData.new\n\n<pre>max_epochs - The maximum ...</pre>\n"],["get_MSE","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_MSE","()","<p>Reads the mean square error from the network.\n"],["get_MSE","RubyFann::Standard","RubyFann/Standard.html#method-i-get_MSE","()","<p>Reads the mean square error from the network.\n"],["get_activation_function","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_activation_function","(p1, p2)","<p>Get the activation function for neuron number <strong>neuron</strong> in layer number <strong>layer</strong>, counting the input layer …\n"],["get_activation_function","RubyFann::Standard","RubyFann/Standard.html#method-i-get_activation_function","(p1, p2)","<p>Get the activation function for neuron number <strong>neuron</strong> in layer number <strong>layer</strong>, counting the input layer …\n"],["get_activation_steepness","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_activation_steepness","(p1, p2)","<p>Get the activation steepness for neuron number neuron in layer number layer, counting the input layer …\n"],["get_activation_steepness","RubyFann::Standard","RubyFann/Standard.html#method-i-get_activation_steepness","(p1, p2)","<p>Get the activation steepness for neuron number neuron in layer number layer, counting the input layer …\n"],["get_bias_array","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_bias_array","()","<p>Return array of bias(es)\n"],["get_bias_array","RubyFann::Standard","RubyFann/Standard.html#method-i-get_bias_array","()","<p>Return array of bias(es)\n"],["get_bit_fail","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_bit_fail","()","\n<pre class=\"ruby\"><span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">number</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">fail</span> <span class=\"ruby-identifier\">bits</span>; <span class=\"ruby-identifier\">means</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">number</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">output</span> <span class=\"ruby-identifier\">neurons</span> <span class=\"ruby-identifier\">which</span> <span class=\"ruby-identifier\">differ</span> <span class=\"ruby-identifier\">more</span>\n</pre>\n<p>than the bit fail limit …\n"],["get_bit_fail","RubyFann::Standard","RubyFann/Standard.html#method-i-get_bit_fail","()","\n<pre class=\"ruby\"><span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">number</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">fail</span> <span class=\"ruby-identifier\">bits</span>; <span class=\"ruby-identifier\">means</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">number</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">output</span> <span class=\"ruby-identifier\">neurons</span> <span class=\"ruby-identifier\">which</span> <span class=\"ruby-identifier\">differ</span> <span class=\"ruby-identifier\">more</span>\n</pre>\n<p>than the bit fail limit …\n"],["get_bit_fail_limit","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_bit_fail_limit","()","<p>Returns the bit fail limit used during training.\n"],["get_bit_fail_limit","RubyFann::Standard","RubyFann/Standard.html#method-i-get_bit_fail_limit","()","<p>Returns the bit fail limit used during training.\n"],["get_cascade_activation_functions","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_activation_functions","()","<p>The cascade activation functions is an array of the different activation functions used by\n\n<pre>the candidates. ...</pre>\n"],["get_cascade_activation_functions","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_activation_functions","()","<p>The cascade activation functions is an array of the different activation functions used by\n\n<pre>the candidates. ...</pre>\n"],["get_cascade_activation_functions_count","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_activation_functions_count","()","<p>The number of activation functions in the &lt;get_cascade_activation_functions&gt; array\n"],["get_cascade_activation_functions_count","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_activation_functions_count","()","<p>The number of activation functions in the &lt;get_cascade_activation_functions&gt; array\n"],["get_cascade_activation_steepnesses","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_activation_steepnesses","()","<p>The cascade activation steepnesses array is an array of the different activation functions used by\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_activation_steepnesses","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_activation_steepnesses","()","<p>The cascade activation steepnesses array is an array of the different activation functions used by\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_activation_steepnesses_count","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_activation_steepnesses_count","()","<p>The number of activation steepnesses in the &lt;get_cascade_activation_functions&gt; array.\n"],["get_cascade_activation_steepnesses_count","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_activation_steepnesses_count","()","<p>The number of activation steepnesses in the &lt;get_cascade_activation_functions&gt; array.\n"],["get_cascade_candidate_change_fraction","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_candidate_change_fraction","()","<p>The cascade candidate change fraction is a number between 0 and 1\n"],["get_cascade_candidate_change_fraction","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_candidate_change_fraction","()","<p>The cascade candidate change fraction is a number between 0 and 1\n"],["get_cascade_candidate_limit","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_candidate_limit","()","<p>The candidate limit is a limit for how much the candidate neuron may be trained.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_candidate_limit","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_candidate_limit","()","<p>The candidate limit is a limit for how much the candidate neuron may be trained.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_candidate_stagnation_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_candidate_stagnation_epochs","()","<p>The number of cascade candidate stagnation epochs determines the number of epochs training is allowed …\n"],["get_cascade_candidate_stagnation_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_candidate_stagnation_epochs","()","<p>The number of cascade candidate stagnation epochs determines the number of epochs training is allowed …\n"],["get_cascade_max_cand_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_max_cand_epochs","()","<p>The maximum candidate epochs determines the maximum number of epochs the input\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">connections</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">candidates</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_max_cand_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_max_cand_epochs","()","<p>The maximum candidate epochs determines the maximum number of epochs the input\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">connections</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">candidates</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_max_out_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_max_out_epochs","()","<p>The maximum out epochs determines the maximum number of epochs the output connections\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">may</span> <span class=\"ruby-identifier\">be</span> <span class=\"ruby-identifier\">trained</span> <span class=\"ruby-identifier\">after</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_max_out_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_max_out_epochs","()","<p>The maximum out epochs determines the maximum number of epochs the output connections\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">may</span> <span class=\"ruby-identifier\">be</span> <span class=\"ruby-identifier\">trained</span> <span class=\"ruby-identifier\">after</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_num_candidate_groups","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_num_candidate_groups","()","<p>The number of candidate groups is the number of groups of identical candidates which will be used\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">during</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_num_candidate_groups","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_num_candidate_groups","()","<p>The number of candidate groups is the number of groups of identical candidates which will be used\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">during</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_cascade_num_candidates","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_num_candidates","()","<p>The number of candidates used during training (calculated by multiplying &lt;get_cascade_activation_functions_count&gt;, …\n"],["get_cascade_num_candidates","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_num_candidates","()","<p>The number of candidates used during training (calculated by multiplying &lt;get_cascade_activation_functions_count&gt;, …\n"],["get_cascade_output_change_fraction","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_output_change_fraction","()","<p>The cascade output change fraction is a number between 0 and 1\n"],["get_cascade_output_change_fraction","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_output_change_fraction","()","<p>The cascade output change fraction is a number between 0 and 1\n"],["get_cascade_output_stagnation_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_output_stagnation_epochs","()","<p>The number of cascade output stagnation epochs determines the number of epochs training is allowed to …\n"],["get_cascade_output_stagnation_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_output_stagnation_epochs","()","<p>The number of cascade output stagnation epochs determines the number of epochs training is allowed to …\n"],["get_cascade_weight_multiplier","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_cascade_weight_multiplier","()","<p>The weight multiplier is a parameter which is used to multiply the weights from the candidate neuron …\n"],["get_cascade_weight_multiplier","RubyFann::Standard","RubyFann/Standard.html#method-i-get_cascade_weight_multiplier","()","<p>The weight multiplier is a parameter which is used to multiply the weights from the candidate neuron …\n"],["get_connection_rate","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_connection_rate","()","<p>Get the connection rate used when the network was created.\n"],["get_connection_rate","RubyFann::Standard","RubyFann/Standard.html#method-i-get_connection_rate","()","<p>Get the connection rate used when the network was created.\n"],["get_layer_array","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_layer_array","()","<p>Get list of layers in array format where each element contains number of neurons in that layer\n"],["get_layer_array","RubyFann::Standard","RubyFann/Standard.html#method-i-get_layer_array","()","<p>Get list of layers in array format where each element contains number of neurons in that layer\n"],["get_learning_momentum","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_learning_momentum","()","<p>Get the learning momentum.\n"],["get_learning_momentum","RubyFann::Standard","RubyFann/Standard.html#method-i-get_learning_momentum","()","<p>Get the learning momentum.\n"],["get_learning_rate","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_learning_rate","()","<p>The learning rate is used to determine how aggressive training should be for some of the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">training</span> <span class=\"ruby-identifier\">algorithms</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_learning_rate","RubyFann::Standard","RubyFann/Standard.html#method-i-get_learning_rate","()","<p>The learning rate is used to determine how aggressive training should be for some of the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">training</span> <span class=\"ruby-identifier\">algorithms</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get_network_type","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_network_type","()","<p>Get the type of network.  Returns as ruby symbol (one of :shortcut, :layer)\n"],["get_network_type","RubyFann::Standard","RubyFann/Standard.html#method-i-get_network_type","()","<p>Get the type of network.  Returns as ruby symbol (one of :shortcut, :layer)\n"],["get_neurons","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_neurons","()","<p>Return array&lt;hash&gt; where each array element is a hash representing a neuron.  It contains the following …\n"],["get_neurons","RubyFann::Standard","RubyFann/Standard.html#method-i-get_neurons","()","<p>Return array&lt;hash&gt; where each array element is a hash representing a neuron.  It contains the following …\n"],["get_num_input","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_num_input","()","<p>Get the number of input neurons.\n"],["get_num_input","RubyFann::Standard","RubyFann/Standard.html#method-i-get_num_input","()","<p>Get the number of input neurons.\n"],["get_num_layers","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_num_layers","()","<p>Get the number of layers in the network.\n"],["get_num_layers","RubyFann::Standard","RubyFann/Standard.html#method-i-get_num_layers","()","<p>Get the number of layers in the network.\n"],["get_num_output","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_num_output","()","<p>Get the number of output neurons.\n"],["get_num_output","RubyFann::Standard","RubyFann/Standard.html#method-i-get_num_output","()","<p>Get the number of output neurons.\n"],["get_quickprop_decay","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_quickprop_decay","()","<p>The decay is a small negative valued number which is the factor that the weights should become smaller …\n"],["get_quickprop_decay","RubyFann::Standard","RubyFann/Standard.html#method-i-get_quickprop_decay","()","<p>The decay is a small negative valued number which is the factor that the weights should become smaller …\n"],["get_quickprop_mu","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_quickprop_mu","()","<p>The mu factor is used to increase and decrease the step-size during quickprop training. The mu factor …\n"],["get_quickprop_mu","RubyFann::Standard","RubyFann/Standard.html#method-i-get_quickprop_mu","()","<p>The mu factor is used to increase and decrease the step-size during quickprop training. The mu factor …\n"],["get_rprop_decrease_factor","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_rprop_decrease_factor","()","<p>The decrease factor is a value smaller than 1, which is used to decrease the step-size during RPROP training. …\n"],["get_rprop_decrease_factor","RubyFann::Standard","RubyFann/Standard.html#method-i-get_rprop_decrease_factor","()","<p>The decrease factor is a value smaller than 1, which is used to decrease the step-size during RPROP training. …\n"],["get_rprop_delta_max","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_rprop_delta_max","()","<p>The maximum step-size is a positive number determining how large the maximum step-size may be.\n"],["get_rprop_delta_max","RubyFann::Standard","RubyFann/Standard.html#method-i-get_rprop_delta_max","()","<p>The maximum step-size is a positive number determining how large the maximum step-size may be.\n"],["get_rprop_delta_min","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_rprop_delta_min","()","<p>The minimum step-size is a small positive number determining how small the minimum step-size may be. …\n"],["get_rprop_delta_min","RubyFann::Standard","RubyFann/Standard.html#method-i-get_rprop_delta_min","()","<p>The minimum step-size is a small positive number determining how small the minimum step-size may be. …\n"],["get_rprop_delta_zero","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_rprop_delta_zero","()","<p>The initial step-size is a positive number determining the initial step size.\n"],["get_rprop_delta_zero","RubyFann::Standard","RubyFann/Standard.html#method-i-get_rprop_delta_zero","()","<p>The initial step-size is a positive number determining the initial step size.\n"],["get_rprop_increase_factor","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_rprop_increase_factor","()","<p>The increase factor is a value larger than 1, which is used to increase the step-size during RPROP training. …\n"],["get_rprop_increase_factor","RubyFann::Standard","RubyFann/Standard.html#method-i-get_rprop_increase_factor","()","<p>The increase factor is a value larger than 1, which is used to increase the step-size during RPROP training. …\n"],["get_total_connections","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_total_connections","()","<p>Get the total number of connections in the entire network.\n"],["get_total_connections","RubyFann::Standard","RubyFann/Standard.html#method-i-get_total_connections","()","<p>Get the total number of connections in the entire network.\n"],["get_total_neurons","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_total_neurons","()","<p>Get the total number of neurons in the entire network.\n"],["get_total_neurons","RubyFann::Standard","RubyFann/Standard.html#method-i-get_total_neurons","()","<p>Get the total number of neurons in the entire network.\n"],["get_train_error_function","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_train_error_function","()","<p>Returns the error function used during training.  One of the following symbols:\n\n<pre>:linear, :tanh</pre>\n"],["get_train_error_function","RubyFann::Standard","RubyFann/Standard.html#method-i-get_train_error_function","()","<p>Returns the error function used during training.  One of the following symbols:\n\n<pre>:linear, :tanh</pre>\n"],["get_train_stop_function","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_train_stop_function","()","<p>Returns the training stop function.  One of the following symbols:\n\n<pre>:mse, :bit</pre>\n"],["get_train_stop_function","RubyFann::Standard","RubyFann/Standard.html#method-i-get_train_stop_function","()","<p>Returns the training stop function.  One of the following symbols:\n\n<pre>:mse, :bit</pre>\n"],["get_training_algorithm","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-get_training_algorithm","()","<p>Returns the training algorithm.  One of the following symbols:\n\n<pre>:incremental, :batch, :rprop, :quickprop</pre>\n"],["get_training_algorithm","RubyFann::Standard","RubyFann/Standard.html#method-i-get_training_algorithm","()","<p>Returns the training algorithm.  One of the following symbols:\n\n<pre>:incremental, :batch, :rprop, :quickprop</pre>\n"],["init_weights","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-init_weights","(p1)","<p>Initialize the weights using Widrow + Nguyen’s algorithm.\n"],["init_weights","RubyFann::Standard","RubyFann/Standard.html#method-i-init_weights","(p1)","<p>Initialize the weights using Widrow + Nguyen’s algorithm.\n"],["length","RubyFann::TrainData","RubyFann/TrainData.html#method-i-length","()","<p>Length of training data\n"],["new","RubyFann::Shortcut","RubyFann/Shortcut.html#method-c-new","(p1)","<p>Initialization routine for both standard, shortcut &amp; filename forms of FANN:\n<p>Standard Initialization: …\n"],["new","RubyFann::Standard","RubyFann/Standard.html#method-c-new","(p1)","<p>Initialization routine for both standard, shortcut &amp; filename forms of FANN:\n<p>Standard Initialization: …\n"],["new","RubyFann::TrainData","RubyFann/TrainData.html#method-c-new","(p1)","\n<pre>Initialize in one of the following forms:\n\n# This is a flat file with training data as described in FANN ...</pre>\n"],["print_connections","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-print_connections","()","<p>Will print the connections of the ann in a compact matrix,\n\n<pre>for easy viewing of the internals of the ann.</pre>\n"],["print_connections","RubyFann::Standard","RubyFann/Standard.html#method-i-print_connections","()","<p>Will print the connections of the ann in a compact matrix,\n\n<pre>for easy viewing of the internals of the ann.</pre>\n"],["print_parameters","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-print_parameters","()","<p>Print current NN parameters to stdout\n"],["print_parameters","RubyFann::Standard","RubyFann/Standard.html#method-i-print_parameters","()","<p>Print current NN parameters to stdout\n"],["randomize_weights","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-randomize_weights","(p1, p2)","<p>Give each connection a random weight between <strong>min_weight</strong> and <strong>max_weight</strong>\n"],["randomize_weights","RubyFann::Standard","RubyFann/Standard.html#method-i-randomize_weights","(p1, p2)","<p>Give each connection a random weight between <strong>min_weight</strong> and <strong>max_weight</strong>\n"],["reset_MSE","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-reset_MSE","()","<p>Resets the mean square error from the network. This function also resets the number of bits that fail. …\n"],["reset_MSE","RubyFann::Standard","RubyFann/Standard.html#method-i-reset_MSE","()","<p>Resets the mean square error from the network. This function also resets the number of bits that fail. …\n"],["run","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-run","(p1)","<p>Run neural net on array&lt;Float&gt; of inputs with current parameters. Returns array&lt;Float&gt; as …\n"],["run","RubyFann::Standard","RubyFann/Standard.html#method-i-run","(p1)","<p>Run neural net on array&lt;Float&gt; of inputs with current parameters. Returns array&lt;Float&gt; as …\n"],["save","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-save","(p1)","<p>Save the entire network to configuration file with given name\n"],["save","RubyFann::Standard","RubyFann/Standard.html#method-i-save","(p1)","<p>Save the entire network to configuration file with given name\n"],["save","RubyFann::TrainData","RubyFann/TrainData.html#method-i-save","(p1)","<p>Save to given filename\n"],["set_activation_function","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_function","(p1, p2, p3)","<p>Set the activation function for neuron number <strong>neuron</strong> in layer number <strong>layer</strong>,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counting</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">input</span> <span class=\"ruby-identifier\">layer</span> <span class=\"ruby-identifier\">as</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_activation_function","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_function","(p1, p2, p3)","<p>Set the activation function for neuron number <strong>neuron</strong> in layer number <strong>layer</strong>,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counting</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">input</span> <span class=\"ruby-identifier\">layer</span> <span class=\"ruby-identifier\">as</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_activation_function_hidden","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_function_hidden","(p1)","<p>Set the activation function for all of the hidden layers.  activation_func must be one of the following …\n"],["set_activation_function_hidden","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_function_hidden","(p1)","<p>Set the activation function for all of the hidden layers.  activation_func must be one of the following …\n"],["set_activation_function_layer","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_function_layer","(p1, p2)","<p>Set the activation function for all the neurons in the layer number <strong>layer</strong>,\n\n<pre class=\"ruby\">  <span class=\"ruby-identifier\">counting</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">input</span> <span class=\"ruby-identifier\">layer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_activation_function_layer","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_function_layer","(p1, p2)","<p>Set the activation function for all the neurons in the layer number <strong>layer</strong>,\n\n<pre class=\"ruby\">  <span class=\"ruby-identifier\">counting</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">input</span> <span class=\"ruby-identifier\">layer</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_activation_function_output","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_function_output","(p1)","<p>Set the activation function for the output layer.  activation_func must be one of the following symbols: …\n"],["set_activation_function_output","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_function_output","(p1)","<p>Set the activation function for the output layer.  activation_func must be one of the following symbols: …\n"],["set_activation_steepness","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_steepness","(p1, p2, p3)","<p>Set the activation steepness for neuron number {neuron} in layer number {layer}, counting the input layer …\n"],["set_activation_steepness","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_steepness","(p1, p2, p3)","<p>Set the activation steepness for neuron number {neuron} in layer number {layer}, counting the input layer …\n"],["set_activation_steepness_hidden","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_steepness_hidden","(p1)","<p>Set the activation steepness in all of the hidden layers.\n"],["set_activation_steepness_hidden","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_steepness_hidden","(p1)","<p>Set the activation steepness in all of the hidden layers.\n"],["set_activation_steepness_layer","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_steepness_layer","(p1, p2)","<p>Set the activation steepness all of the neurons in layer number <strong>layer</strong>, counting the input layer as layer …\n"],["set_activation_steepness_layer","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_steepness_layer","(p1, p2)","<p>Set the activation steepness all of the neurons in layer number <strong>layer</strong>, counting the input layer as layer …\n"],["set_activation_steepness_output","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_activation_steepness_output","(p1)","<p>Set the activation steepness in the output layer.\n"],["set_activation_steepness_output","RubyFann::Standard","RubyFann/Standard.html#method-i-set_activation_steepness_output","(p1)","<p>Set the activation steepness in the output layer.\n"],["set_bit_fail_limit","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_bit_fail_limit","(p1)","<p>Sets the bit fail limit used during training.\n"],["set_bit_fail_limit","RubyFann::Standard","RubyFann/Standard.html#method-i-set_bit_fail_limit","(p1)","<p>Sets the bit fail limit used during training.\n"],["set_cascade_activation_functions","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_activation_functions","(p1)","<p>The cascade activation functions is an array of the different activation functions used by\n\n<pre>the candidates. ...</pre>\n"],["set_cascade_activation_functions","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_activation_functions","(p1)","<p>The cascade activation functions is an array of the different activation functions used by\n\n<pre>the candidates. ...</pre>\n"],["set_cascade_activation_steepnesses","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_activation_steepnesses","(p1)","<p>The cascade activation steepnesses array is an array of the different activation functions used by\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_activation_steepnesses","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_activation_steepnesses","(p1)","<p>The cascade activation steepnesses array is an array of the different activation functions used by\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_candidate_change_fraction","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_candidate_change_fraction","(p1)","<p>The cascade candidate change fraction is a number between 0 and 1\n"],["set_cascade_candidate_change_fraction","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_candidate_change_fraction","(p1)","<p>The cascade candidate change fraction is a number between 0 and 1\n"],["set_cascade_candidate_limit","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_candidate_limit","(p1)","<p>The candidate limit is a limit for how much the candidate neuron may be trained.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_candidate_limit","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_candidate_limit","(p1)","<p>The candidate limit is a limit for how much the candidate neuron may be trained.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">limit</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_candidate_stagnation_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_candidate_stagnation_epochs","(p1)","<p>The number of cascade candidate stagnation epochs determines the number of epochs training is allowed …\n"],["set_cascade_candidate_stagnation_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_candidate_stagnation_epochs","(p1)","<p>The number of cascade candidate stagnation epochs determines the number of epochs training is allowed …\n"],["set_cascade_max_cand_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_max_cand_epochs","(p1)","<p>The maximum candidate epochs determines the maximum number of epochs the input\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">connections</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">candidates</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_max_cand_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_max_cand_epochs","(p1)","<p>The maximum candidate epochs determines the maximum number of epochs the input\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">connections</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">candidates</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_max_out_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_max_out_epochs","(p1)","<p>The maximum out epochs determines the maximum number of epochs the output connections\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">may</span> <span class=\"ruby-identifier\">be</span> <span class=\"ruby-identifier\">trained</span> <span class=\"ruby-identifier\">after</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_max_out_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_max_out_epochs","(p1)","<p>The maximum out epochs determines the maximum number of epochs the output connections\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">may</span> <span class=\"ruby-identifier\">be</span> <span class=\"ruby-identifier\">trained</span> <span class=\"ruby-identifier\">after</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_num_candidate_groups","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_num_candidate_groups","(p1)","<p>The number of candidate groups is the number of groups of identical candidates which will be used\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">during</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_num_candidate_groups","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_num_candidate_groups","(p1)","<p>The number of candidate groups is the number of groups of identical candidates which will be used\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">during</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_cascade_output_change_fraction","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_output_change_fraction","(p1)","<p>The cascade output change fraction is a number between 0 and 1\n"],["set_cascade_output_change_fraction","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_output_change_fraction","(p1)","<p>The cascade output change fraction is a number between 0 and 1\n"],["set_cascade_output_stagnation_epochs","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_output_stagnation_epochs","(p1)","<p>The number of cascade output stagnation epochs determines the number of epochs training is allowed to …\n"],["set_cascade_output_stagnation_epochs","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_output_stagnation_epochs","(p1)","<p>The number of cascade output stagnation epochs determines the number of epochs training is allowed to …\n"],["set_cascade_weight_multiplier","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_cascade_weight_multiplier","(p1)","<p>The weight multiplier is a parameter which is used to multiply the weights from the candidate neuron …\n"],["set_cascade_weight_multiplier","RubyFann::Standard","RubyFann/Standard.html#method-i-set_cascade_weight_multiplier","(p1)","<p>The weight multiplier is a parameter which is used to multiply the weights from the candidate neuron …\n"],["set_learning_momentum","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_learning_momentum","(p1)","<p>Set the learning momentum.\n"],["set_learning_momentum","RubyFann::Standard","RubyFann/Standard.html#method-i-set_learning_momentum","(p1)","<p>Set the learning momentum.\n"],["set_learning_rate","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_learning_rate","(p1)","<p>The learning rate is used to determine how aggressive training should be for some of the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">training</span> <span class=\"ruby-identifier\">algorithms</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_learning_rate","RubyFann::Standard","RubyFann/Standard.html#method-i-set_learning_rate","(p1)","<p>The learning rate is used to determine how aggressive training should be for some of the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">training</span> <span class=\"ruby-identifier\">algorithms</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_quickprop_decay","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_quickprop_decay","(p1)","<p>Sets the quickprop decay factor\n"],["set_quickprop_decay","RubyFann::Standard","RubyFann/Standard.html#method-i-set_quickprop_decay","(p1)","<p>Sets the quickprop decay factor\n"],["set_quickprop_mu","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_quickprop_mu","(p1)","<p>Sets the quickprop mu factor.\n"],["set_quickprop_mu","RubyFann::Standard","RubyFann/Standard.html#method-i-set_quickprop_mu","(p1)","<p>Sets the quickprop mu factor.\n"],["set_rprop_decrease_factor","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_rprop_decrease_factor","(p1)","<p>The decrease factor is a value smaller than 1, which is used to decrease the step-size during RPROP training. …\n"],["set_rprop_decrease_factor","RubyFann::Standard","RubyFann/Standard.html#method-i-set_rprop_decrease_factor","(p1)","<p>The decrease factor is a value smaller than 1, which is used to decrease the step-size during RPROP training. …\n"],["set_rprop_delta_max","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_rprop_delta_max","(p1)","<p>The maximum step-size is a positive number determining how large the maximum step-size may be.\n"],["set_rprop_delta_max","RubyFann::Standard","RubyFann/Standard.html#method-i-set_rprop_delta_max","(p1)","<p>The maximum step-size is a positive number determining how large the maximum step-size may be.\n"],["set_rprop_delta_min","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_rprop_delta_min","(p1)","<p>The minimum step-size is a small positive number determining how small the minimum step-size may be. …\n"],["set_rprop_delta_min","RubyFann::Standard","RubyFann/Standard.html#method-i-set_rprop_delta_min","(p1)","<p>The minimum step-size is a small positive number determining how small the minimum step-size may be. …\n"],["set_rprop_delta_zero","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_rprop_delta_zero","(p1)","<p>The initial step-size is a positive number determining the initial step size.\n"],["set_rprop_delta_zero","RubyFann::Standard","RubyFann/Standard.html#method-i-set_rprop_delta_zero","(p1)","<p>The initial step-size is a positive number determining the initial step size.\n"],["set_rprop_increase_factor","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_rprop_increase_factor","(p1)","<p>The increase factor used during RPROP training.\n"],["set_rprop_increase_factor","RubyFann::Standard","RubyFann/Standard.html#method-i-set_rprop_increase_factor","(p1)","<p>The increase factor used during RPROP training.\n"],["set_train_error_function","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_train_error_function","(p1)","<p>Sets the error function used during training.  One of the following symbols:\n\n<pre>:linear, :tanh</pre>\n"],["set_train_error_function","RubyFann::Standard","RubyFann/Standard.html#method-i-set_train_error_function","(p1)","<p>Sets the error function used during training.  One of the following symbols:\n\n<pre>:linear, :tanh</pre>\n"],["set_train_stop_function","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_train_stop_function","(p1)","<p>Set the training stop function.  One of the following symbols:\n\n<pre>:mse, :bit</pre>\n"],["set_train_stop_function","RubyFann::Standard","RubyFann/Standard.html#method-i-set_train_stop_function","(p1)","<p>Set the training stop function.  One of the following symbols:\n\n<pre>:mse, :bit</pre>\n"],["set_training_algorithm","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-set_training_algorithm","(p1)","<p>Set the training algorithm.  One of the following symbols:\n\n<pre>:incremental, :batch, :rprop, :quickprop</pre>\n"],["set_training_algorithm","RubyFann::Standard","RubyFann/Standard.html#method-i-set_training_algorithm","(p1)","<p>Set the training algorithm.  One of the following symbols:\n\n<pre>:incremental, :batch, :rprop, :quickprop</pre>\n"],["shuffle","RubyFann::TrainData","RubyFann/TrainData.html#method-i-shuffle","()","<p>Shuffles training data, randomizing the order. This is recommended for incremental training, while it …\n"],["test_data","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-test_data","(p1)","<p>Test a set of training data and calculates the MSE for the training data.\n"],["test_data","RubyFann::Standard","RubyFann/Standard.html#method-i-test_data","(p1)","<p>Test a set of training data and calculates the MSE for the training data.\n"],["train","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-train","(p1, p2)","<p>Train with a single input-output pair.\n\n<pre>input - The inputs given to the network\nexpected_output - The outputs ...</pre>\n"],["train","RubyFann::Standard","RubyFann/Standard.html#method-i-train","(p1, p2)","<p>Train with a single input-output pair.\n\n<pre>input - The inputs given to the network\nexpected_output - The outputs ...</pre>\n"],["train_epoch","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-train_epoch","(p1)","<p>Train one epoch with a set of training data, created with RubyFann::TrainData.new\n"],["train_epoch","RubyFann::Standard","RubyFann/Standard.html#method-i-train_epoch","(p1)","<p>Train one epoch with a set of training data, created with RubyFann::TrainData.new\n"],["train_on_data","RubyFann::Shortcut","RubyFann/Shortcut.html#method-i-train_on_data","(p1, p2, p3, p4)","<p>Train with training data created with RubyFann::TrainData.new\n\n<pre>max_epochs - The maximum number of epochs ...</pre>\n"],["train_on_data","RubyFann::Standard","RubyFann/Standard.html#method-i-train_on_data","(p1, p2, p3, p4)","<p>Train with training data created with RubyFann::TrainData.new\n\n<pre>max_epochs - The maximum number of epochs ...</pre>\n"],["README","","README_md.html","","<p>RubyFann\n<p><em>Fast</em> <strong>AI</strong>\n<p><img src=\"nn1.png\">\n"]]}}